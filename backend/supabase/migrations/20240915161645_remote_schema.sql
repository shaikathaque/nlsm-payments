
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."PAYMENT_STATUS" AS ENUM (
    'IN_PROGRESS',
    'COMPLETE',
    'FAILED'
);

ALTER TYPE "public"."PAYMENT_STATUS" OWNER TO "postgres";

COMMENT ON TYPE "public"."PAYMENT_STATUS" IS 'Status of the initiated payment';

CREATE TYPE "public"."branch" AS ENUM (
    'UTTARA_IHSB',
    'BASHUNDHARA_SG'
);

ALTER TYPE "public"."branch" OWNER TO "postgres";

COMMENT ON TYPE "public"."branch" IS 'Training Location';

CREATE TYPE "public"."payment_method" AS ENUM (
    'BKASH',
    'CASH'
);

ALTER TYPE "public"."payment_method" OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."bkash_tokens" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "id_token" "text" NOT NULL,
    "refresh_token" "text",
    "expires_at" numeric
);

ALTER TABLE "public"."bkash_tokens" OWNER TO "postgres";

COMMENT ON TABLE "public"."bkash_tokens" IS 'Stores BKash tokens for use during runtime';

CREATE TABLE IF NOT EXISTS "public"."payments" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "method" "public"."payment_method" NOT NULL,
    "bkash_transaction_id" "text",
    "amount" "text" NOT NULL,
    "athlete_name" "text",
    "email" "text" NOT NULL,
    "branch" "public"."branch" NOT NULL,
    "bkash_payment_id" "text",
    "payment_status" "public"."PAYMENT_STATUS" NOT NULL
);

ALTER TABLE "public"."payments" OWNER TO "postgres";

ALTER TABLE "public"."payments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."payments_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."bkash_tokens"
    ADD CONSTRAINT "bkash_tokens_pkey" PRIMARY KEY ("id_token");

ALTER TABLE ONLY "public"."payments"
    ADD CONSTRAINT "payments_bkash_payment_id_key" UNIQUE ("bkash_payment_id");

ALTER TABLE ONLY "public"."payments"
    ADD CONSTRAINT "payments_bkash_transaction_id_key" UNIQUE ("bkash_transaction_id");

ALTER TABLE ONLY "public"."payments"
    ADD CONSTRAINT "payments_pkey" PRIMARY KEY ("id");

CREATE OR REPLACE TRIGGER "new_payment" AFTER INSERT OR UPDATE ON "public"."payments" FOR EACH ROW EXECUTE FUNCTION "supabase_functions"."http_request"('https://gxdnjhwiukotbgstgaxh.supabase.co/functions/v1/payment-receipt-email', 'POST', '{"Content-type":"application/json"}', '{}', '1000');

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."bkash_tokens" TO "anon";
GRANT ALL ON TABLE "public"."bkash_tokens" TO "authenticated";
GRANT ALL ON TABLE "public"."bkash_tokens" TO "service_role";

GRANT ALL ON TABLE "public"."payments" TO "anon";
GRANT ALL ON TABLE "public"."payments" TO "authenticated";
GRANT ALL ON TABLE "public"."payments" TO "service_role";

GRANT ALL ON SEQUENCE "public"."payments_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."payments_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."payments_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
